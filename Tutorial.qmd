

---
title: "Tinyplot Tutorial"
subtitle: "A quick into to an R graphics package"
author: Norm Matloff
toc: true
---

[Author bio](https://heather.cs.ucdavis.edu/matloff.html)


::: {.callout-important title='Main Points'}

I used to use **ggplot2** for almost all my plots, but lately I've just used
base-R. The **tinyplot** package, an extension of base-R plots, allows me
to access base-plots in a more convenient, pleasant and intuitive manner.
Advantages:

* Automatic generation of legends.

* Natural syntax: R 'formula' plus '|', the latter evoking conditional
  probability. E.g. "salary ~ age | sex", plotting salary against age,
  with separate curves etc. for men and women. 

* One can even have e.g. ' | U' for a continuous U! It then means a color
  gradient, say for a third variable.

* Easy to add to existing plot. Easy to save plot to disk. Easy faceting. 

* Base-R ops still available.

(Note: the **tinyplot** package should not be confused with **tidyplots**.)

:::

# Syntax Overview

Roughly speaking, the call form is

``` r
tinyplot(formula,[optional conditioning], type=plot type, 
   [optional faceting], data=dataset,
   [optional base-R plot parameters])
```

Most of these are named arguments; make sure you specify the names.

One can abbreviate **tinyplot** to **plt**. 

Plot type can be specified either as a call, e.g. **type_lm()**, or via
a quoted string shortcut, e.g. **"lm"**. Note: The **type** argument must
come *before* the **data** argument.

Layering can be done via **tinyplot_add**.

# Examples

## The Census Dataset

These are programmers and engineers in the 2000 census. Here **occ** is 
one of 6 job categories. My primary interest here is investigating
possible sex discrimination in salaries. Note: Census data top-coded
income at \$300,000.

So, let's try it on the **svcensus** dataset from my **qeML** package.

```{r}
suppressPackageStartupMessages(library(qeML))
data(svcensus)
head(svcensus,5)
``` 

## Compare Densities across Groups

```{r}
# plot histograms (area 1.0)
library(tinyplot)
tinyplot(~ wageinc | gender,
   data=svcensus,type='density')
```

Men seem to have a slight edge in the middle income levels, but possibly
a substantial one at the very high levels.

But of course a big factor is **wkswrkd**, the number of weeks worked.
If there is a substantial difference between the sexes in this variable,
it could bias our analysis.

```{r}
tinyplot( ~ wkswrkd | gender,data=svcensus,type='density')
```

Not much difference in general, but more women seemed to report 0 weeks
worked. 

## Fit and Display a Linear Model

It is then natural to correct for number of weeks worked via linear
regression:

```{r}
tinyplot(wageinc ~ wkswrkd| gender,data=svcensus,type='lm')
```

Ah, yes, for those who worked most or all of the year, we see a male
advantage. 

What about possible age differences?

```{r}
tinyplot(wageinc ~ age | gender, data=svcensus,type='lm')
```

Very few elderly in Silicon Valley! Thus very wide confidence bands at
the older level. Similarly, The wider confidence band for women reflects
the fact that women are less numerous in this dataset.

The conference bands are informative, but they may result in some
clutter in more complicated graphs. We can suppress those bands:

```{r}
tinyplot(wageinc ~ age | gender, type=type_lm(se = FALSE), data=svcensus)
```

A clear separation between men and women, with mean wages being
consistently lower for women.

## Model-Free Estimation of a Regression Function

But...should we apply a linear model so carelessly? Let's try a
model-free estimate of the regression functions, using R's **loess**,
which divides the X-axis into intervals and then fits a local polynomial 
model in each interval.

```{r}
tinyplot(wageinc ~ age | gender, type=type_loess(se=FALSE),data=svcensus)
```

Whoa! Never assume a linear model willy-nilly. The true relation is
quite nonmonotonic.  One of the factors underlying this nonmonotonicity
may be age discrimination. 

At any rate, men definitely seem to be paid more, particularly in their
early 40s.

### Faceting

We can facet by, say, occupation.

```{r}
tinyplot(~ wageinc, type='density',data = svcensus, facet=~occ)
```

Occupation codes 102 and 141 pay the most.

```{r}
tinyplot(~ wageinc | gender, type='density',data = svcensus, facet=~occ)
```

In several occupations, notably code 140, the top-code wages seem to be
disproportionately male.

We can facet on two variables:

```{r}
tinyplot(~ wageinc | gender, type='density',data = svcensus,
facet=~occ:gender)
```

```{r}
tinyplot(wageinc ~ age | gender, type = type_loess(se=FALSE), 
   data = svcensus, facet=~occ)
```

The male advantage seems to be especially pronounced for occupation code
140.

## The Iranian Churn Dataset

Let's look at the **Iranian Churn** data in **qeML**, on customer
loyalty in the financial sector.

```{r}
data(IranianChurn)
head(iranChurn)
```

## Compare Densities across Groups

```{r}
tinyplot(~ Balance | Geography, type='density',data=iranChurn)
```

Interesting! Customers from France and Germany exhibit a unimodal
distribution, but those from Spain seem to follow a bimodal pattern.  But
this may be due at least in part to the default values. The analyst may
wish to explore using nondefault values:

``` r
> args(type_density)
function (bw = "nrd0", joint.bw = c("mean", "full", "none"), 
    adjust = 1, kernel = c("gaussian", "epanechnikov", "rectangular", 
    "triangular", "biweight", "cosine", "optcosine"), n = 512, 
    alpha = NULL) 
```

This could be done, say, by the call

```{r}
tinyplot(~ Balance | Geography, type=type_density(kernel='triangular'),
   data=iranChurn)
```

## General Linear Models

One can also apply the general linear model:

```{r}
iranChurn$Exited <- as.numeric(iranChurn$Exited == '1')
tinyplot(Exited ~ Balance, type=type_glm(family=binomial),data=iranChurn)
```

The higher the balance, the more likely the customer is to bolt.

## Use of Color Gradients

Illustration of the color gradient: Probability customer exits, given
balance and number of products they use.

```{r}
z <- glm(Exited ~ Balance + NumOfProducts,data=iranChurn,family=binomial)
iranChurn$Fit <- z$fitted.values
plt(Balance ~ NumOfProducts | Fit, data=iranChurn)
```

The fitted values are probabilities of leaving.  Customers with a lot of
products seem less likely to leave, and by the way, exhibit a narrower
range in balance.

Age is always of interest:

```{r}
z <- glm(Exited ~ Balance + Age,data=iranChurn,family=binomial)
iranChurn$Fit <- z$fitted.values
plt(Balance ~ Age | Fit, data=iranChurn)
```

Older customers are more likely to leave, even with the same balance as
younger ones.



## Layering

