

---
title: "Drawing Insight with Tinyplot Graphics"
subtitle: "A quick intro to generating *interpretable* graphs"
author: Norm Matloff
toc: true
---

[Author bio](https://heather.cs.ucdavis.edu/matloff.html)


::: {.callout-important title='Main Points'}

I used to use **ggplot2** for almost all my plots, but lately I've just used
base-R. The **tinyplot** package, an extension of base-R plots, allows me
to access base-R plots in a more convenient, pleasant and intuitive manner.
Advantages:

* Automatic generation of legends.

* Natural syntax: R 'formula' plus '|', the latter evoking conditional
  probability. E.g. 

  ``` r
  tinyplot(~ wageinc | gender, data=svcensus,type='density')
  ```

  specifies that we plot the *conditional* density of income, *given*
  gender.

* One can even have e.g. ' | U' for a continuous U! It then means a color
  gradient, say for a third variable.

* Easy to add to existing plot. Easy faceting. 

* Base-R ops still available.

(Note: the **tinyplot** package should not be confused with **tidyplots**.)

:::

Our goal:

> Here we present the main features of the **tinyplot** package, but
> importantly, not in isolation, i.e. *not just the mechanics*. We show
> how the package can be *used* for effective storytelling.

## Syntax Overview

Roughly speaking, the call form is

``` r
tinyplot(formula,[optional conditioning], type=plot type, 
   [optional faceting], data=dataset,
   [optional base-R plot parameters])
```

Most of these are named arguments; make sure you specify the names.

One can abbreviate **tinyplot** to **plt**. 

Plot type can be specified either as a call, e.g. **type_lm()**, or via
a quoted string shortcut, e.g. **"lm"**. Note: The **type** argument must
come *before* the **data** argument.

Layering can be done via **tinyplot_add**.

## Examples

### The Census dataset

These are programmers and engineers in Silicon Valley in the 2000
census. Here **occ** is one of 6 job categories. My primary interest
here is investigating possible sex discrimination in salaries. Note:
Census data top-coded income at \$300,000.

So, let's try it on the **svcensus** dataset from my **qeML** package.

```{r}
suppressPackageStartupMessages(library(qeML))
data(svcensus)
head(svcensus,5)
``` 

### Scatter plot

Let's see how to do the usual scatter plot.

```{r}
library(tinyplot)
tinyplot(wageinc ~ age | gender, data=svcensus,cex=0.1)
```

The **cex** argument is from base-R plots, specifying that the dots in
the graph will be 0.1 normal size. Otherwise, they would fuse together
on this dataset, in one ugly blob.

We will withhold comment on trend for now, but note the horizontal line
at the top, representing the top-coded salaries. 

### Compare densities across groups

```{r}
# plot histograms (area 1.0)
tinyplot(~ wageinc | gender, data=svcensus,type='density')
```

Men seem to have a slight edge in the middle income levels, but possibly
a substantial one at the very high levels.

But of course a big factor is **wkswrkd**, the number of weeks worked.
If there is a substantial difference between the sexes in this variable,
it could bias our analysis.

```{r}
tinyplot( ~ wkswrkd | gender,data=svcensus,type='density')
```

Not much difference in general, but more women seemed to report 0 weeks
worked. 

### Fit and display a linear model

It is then natural to correct for number of weeks worked via linear
regression. For each gender, fit a linear model predicting **wageinc**
from **wkswrkd**:

```{r}
tinyplot(wageinc ~ wkswrkd| gender,data=svcensus,type='lm')
```

Ah, yes, for those who worked most or all of the year, we see a male
advantage. That is, for a given number of weeks worked, the mean salary
is higher for men.

What about possible age differences?

```{r}
tinyplot(wageinc ~ age | gender, data=svcensus,type='lm')
```

Very few elderly in Silicon Valley! Thus very wide confidence bands at
the older level. Similarly, the even wider confidence band for women
reflects the fact that women are less numerous in this dataset.

The conference bands are informative, but they may result in some
clutter in more complicated graphs. We can suppress those bands:

```{r}
tinyplot(wageinc ~ age | gender, type=type_lm(se = FALSE), data=svcensus)
```

A clear separation between men and women, with mean wages being
consistently lower for women.

### Model-free estimation of a regression function

But...should we apply a linear model so carelessly? Let's try a
model-free estimate of the regression functions, using R's **loess**,
which divides the X-axis into intervals and then fits a local polynomial 
model in each interval.

```{r}
tinyplot(wageinc ~ age | gender, type=type_loess(se=FALSE),data=svcensus)
```

Whoa! Not linear, not even monotonic.  One of the factors underlying
this nonmonotonicity may be age discrimination. 

Actually, we should have already suspected nonmonotonicity, having seen
the scatter plot earlier in this tutorial.

::: {.callout-tip title='Sample Size Issues'}

Never assume a linear model willy-nilly. While no relation in practice
is exactly linear and slight discrepancies are fine, the relation may be
substantially nonlinear, even substantially nonmonotonic..

:::

At any rate, men definitely seem to be paid more, particularly in their
early 40s.

### Faceting

We can facet by, say, occupation.

```{r}
tinyplot(~ wageinc, type='density',data = svcensus, facet=~occ)
```

Occupation codes 102 and 141 pay the most.

We can break it down further by gender:

```{r}
tinyplot(~ wageinc | gender, type='density',data = svcensus, facet=~occ)
```

In several occupations, notably code 140, the top-code wages seem to be
disproportionately male.

We can facet on two variables:

```{r}
tinyplot(~ wageinc | gender, type='density',data = svcensus,
facet=~occ:gender)
```

How about age? Do the sex-specific relations between wageinc and age
vary from one occupation to another?

```{r}
tinyplot(wageinc ~ age | gender, type = type_loess(se=FALSE), 
   data = svcensus, facet=~occ)
```

The male advantage seems to be especially pronounced for occupation code
140.

::: {.callout-tip title='Pesky Syntax Rules'}

Don't forget the tilde in specifying the faceting variables!

:::

### The Iranian Churn dataset

Let's look at the **Iranian Churn** data in **qeML**, on customer
loyalty in the financial sector.

```{r}
data(IranianChurn)
head(iranChurn)
```

### Compare densities across groups

```{r}
tinyplot(~ Balance | Geography, type='density',data=iranChurn)
```

Interesting! Customers from France and Germany exhibit a unimodal
distribution, but those from Spain seem to follow a bimodal pattern.  But
this may be due at least in part to the default values. The analyst may
wish to explore using nondefault values:

``` r
> args(type_density)
function (bw = "nrd0", joint.bw = c("mean", "full", "none"), 
    adjust = 1, kernel = c("gaussian", "epanechnikov", "rectangular", 
    "triangular", "biweight", "cosine", "optcosine"), n = 512, 
    alpha = NULL) 
```

This could be done, say, by the call

```{r}
tinyplot(~ Balance | Geography, type=type_density(kernel='triangular'),
   data=iranChurn)
```

Not much difference.

### Generalized linear models

One can also apply generalized linear models, say the logistic:

```{r}
iranChurn$Exited <- as.numeric(iranChurn$Exited == '1')
tinyplot(Exited ~ Balance, type=type_glm(family=binomial),data=iranChurn)
```

The higher the balance, the more likely the customer is to bolt.

### The Stanford Vocabulary dataset

This is a survey of vocabulary sizes of young children.

```{r}
library(qeML)
data(english)
head(english)
eng1 <- english[,c(2,5:8,10)]
head(eng1)
eng1 <- stats::na.omit(eng1)
```

Let's explore the role, if any, of the mother's educational level.
For each given level, find the estimated density of vocabulary:

```{r}
tinyplot(~ vocab | mom_ed, type='density', data=eng1)
```

More or less as expected, though except for the Primary case, the data
is largely clumped together. 

Actually, the Primary case is surprisingly bimodal, so we should be
suspicious.  Is it due to having a small sample size for that case?
Let's check:

```{r}
with(eng1,tapply(vocab,mom_ed,length))
```

Remove those cases.

```{r}
eng2 <- eng1[eng1$mom_ed != 'Primary',]
```

::: {.callout-tip title='Sample Size Issues'}

*Graph appearance depends on sample size.* If you see what appears to be
an anomalous graph, check for small samples. Indeed, keep sample size in
mind when noting *any* "interesting" plots.

:::

Reputedly, girls are initially ahead of boys. True?

```{r}
tinyplot(vocab ~ age | sex, type=type_lm(se=FALSE), data=eng2)
```

Yes, according to this, the girls are always somewhat ahead.

What about across ethnicities?

```{r}
tinyplot(vocab ~ age | ethnicity, type=type_lm(se=FALSE), data=eng2)
```

The different ethnicities seem to cluster into two groups, with the
disparity growing with age.

Does the mother's educational level make a difference?

```{r}
tinyplot(vocab ~ age | mom_ed, type=type_loess(se=FALSE), data=eng2)
```

Yes, while the initial difference is small, by age 30 months gaps have
formed.

Note that, unlike our earlier example with the census data, we see that
a linear model would seem to work well here, so let'switch to that.

```{r}
tinyplot(vocab ~ age | mom_ed, type=type_lm(se=FALSE), data=eng2)
```

### Use of color gradients

Illustration of the color gradient in the census data: Find the
probability that a customer exits, given balance and number of products
they use.

Recall that for a logistic model, **glm** finds the probability of 
"Y=1".

```{r}
z <- glm(Exited ~ Balance + NumOfProducts,data=iranChurn,family=binomial)
iranChurn$Fit <- z$fitted.values
plt(Balance ~ NumOfProducts | Fit, data=iranChurn)
```

The fitted values are probabilities of leaving, with dark blue
representing the highest probabilities and yellow-green the lowest.
Customers with a lot of products seem less likely to leave, and by the
way, exhibit a narrower range in balance.

Age is always of interest:

```{r}
z <- glm(Exited ~ Balance + Age,data=iranChurn,family=binomial)
iranChurn$Fit <- z$fitted.values
plt(Balance ~ Age | Fit, data=iranChurn)
```

Nice picture of a fish!

We see that older customers are more likely to leave, even with the same
balance as younger ones.

::: {.callout-important title='Subtle Change in the | Operator'}

The following may seem to be just a mathematical nicety, but it is
actually quite important.

When we first discussed the | operator, we noted that it makes sense,
because | is used in probability theory for quantities like P(A|B).

> Natural syntax: R 'formula' plus '|', the latter evoking conditional
> probability. E.g. 
> 
> ``` r
> tinyplot(~ wageinc | gender, data=svcensus,type='density')
> ```
> 
> specifies that we plot the *conditional* density of income, *given*
> gender.

Here in the current section on color gradients, we are still using | --
but in the reverse direction! E.g. in the code

``` r
plt(Balance ~ Age | Fit, data=iranChurn)
```

we are displaying the (estimated) conditional probability of Exit,
given Balance and Age. In other words, the conditioning quantity is now
*before* the |, not after it.

:::


### Layering

Here one builds up a plot one aspect at a time, literally layer by
layer. The analyst may have pre-planned this, to show the effects of
adding material to a plot one step at a time, or it could arise as a
sudden inspiration, "Hey, what if we add such and such?"

As an example, let's revisit one of our earlier operations:

```{r}
tinyplot(wageinc ~ age | gender, type=type_lm(se=FALSE),data=svcensus)
```

All is well and good, right? But...the analyst may suddenly think,
"Should we be using linear models here?" He/she can then add
nonparametric estimates of the curves, superimposing them on the
original:

``` r 
tinyplot_add(type='loess')
```

![superimposed curves](2regests.png)

Of course, layering is often used for annotation.

